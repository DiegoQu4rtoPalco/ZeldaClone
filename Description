 - Criando Janela do jogo tamanho e largura, extendendo ao canvas e implementando
Runnable.

 - Criando métodos start e stop, variáveis Boolean isRunning true, aonde método start
 é true e stop é false. Método start iremos instanciar Thread, thread é quando se existe
 vários processos sendo executado ele reconhece mais de um processo, depois estartei thread,
 já no método stop thread.join e aceite as exceções, vamos para o métod run, vamos usar agora
 a expreção booleana isRunning no método run, dizer assim while(isRunnig){}; dentro das aspas
 método tick() e render, tick é nosso update, render é aonde será desenhado, no método principal
 aonde foi instanciado o construtor game será estarteado, para testar se está sendo executado em
 tick coloque uma mensagem.
 
 - Desenhando no método render, usaremos BufferedStrategy com parametros no 3 retornando ao void,
 criando um objeto private BufferedImage fundo, instanciando ao construtor com o tipo RGB, adicionando
 Graphics g = fundo.getGraphics(); g = bs.getDrawGraphics();, para chamar imagem use g.drawImage(fundo,
 posX, posY, null); bs.show(); para poder mostrar a imagem e atualizar.
 
 - Agora vamos fazer nosso jogo rodar em 60 FPS, modo que muitos jogadores usam, e mostrar no console
  em tempo real, para isso usaremos algumas variáveis, adicione método stop após duas chaves.
 
 
 - Agora usaremos orientação a objetos para organização dos códigos e suas utilidade em pacotes novos
 novo pacote com.zelda.entities aonde sera os movimentos do jogo, pacote com.zelda.graficos aonde trabalhara
 com imagens, dentro desse pacote nova classe SpriteSheet com suas configurações, dentro do paconte entities
 vamos criar classe Entities e vamos adicionar variaves de movimentos e tamanho, adicionar ao construtor e seus
 métodos Setters. Criando nova classe Player extendendo a classe Enteties, observe que pede para adicionar construtor
 com super, classe aonde pega todos os dados já criado da classe entities. Depois na classe Main vamos trabalhar com List
 cria se um objeto public List<Entities> entities, instanciando no construtor chamando o objeto e e a classe, com o laço
 for nos métodos tick e render passaremos a variavel i pegando os métodos das outras classes, para imagem aparecer na 
 classe Main instanciaremos direto no contrutor a classe Player player com parametros (0, 0, 65, 65, spriteScheet.getSprite(0, 
 0, 65, 65)); antes disso spriteSheet no construro mostrara o caminho da imagem, spriteSheet = new SpriteSheet("/personagem.png");
 execute o programa se tudo ocorrer bem a imagem aparece na tela.
 
 - Adicionando movimento ao jogador, vamos usar a própria classe principal para isso temos q implemtar o KeyListener
 após implementar métodos que ele mesmo pede ao passar o mouse sobre aviso, métodos criado ao final do código
 agora diga no método KeyPressed na função se e.getKeyCode() == KeyEvent.VK_RIGHT || e.getKeyCode() == KeyEvent.VK_D, 
 observe após VK seria a tecla escolhida para ação, modifique as variaveis da classe Entities para protected e crie o 
 método Setter de x e y, e na classe Player faça a função de movimento para cada variável Booleana, na Classe Main
 no método KeyPressed entres chaves dizer se player.right = true, nas demais funções colocar em true, já no método
 KeyReleased deixar em false, assim que soltar da tecla o personagem para, não esqueça de ter um fundo antes do personagem
 para pode limpar a tela assim que o personagem se movimentar.
 
 - Para poder deixar o movimento mais linear, mais sensivel vamos alterar as variáveis x e y da classe Entities, vamos passar
 para double, alguns erros surgirão nos métodos getX e getY, vamos fazer o casting para antes da variváveis, (int)x e int(y).
 
 
 - Mudaremos um poucos os métodos de acesso aos Sprites, na classe Player vamos adiconar novo método render, com parametros Graphics g
 importes as bibliotecas, observe personagem não visivel, mais, para podermos trabalhar e ter acesso mais agíl vamos mudar para public static o objeto
 SpriteSheet da classe main, voltando para classe Player, novos objetos private BufferedImage rightPlayer[]; leftPlayer[], usaremos vetores
 para acesso de cada imagem que será instanciado, no construtor instanciaremos rightPlayer = new BufferedImage[quantidadeDeImagens], assim fazer
 com leftPlayer também, agora usando o laço for para percorrer a variável i, lembrando que i é menor que quantidade de imagens locada no vetores
 dentro das chaves vamos dizer assim rightPlayer[i] = Main.spriteSheet.getSpriteSheet(posição da imagem + (i * tamanhoDoSprite), 0, tamanhoDoSprite,
 tamanhoDoSprite); Para testar com uma imagem apenas, no método render dentro das chaves g.drawImage(rightPlayer[0], this.getX, this.getY, null);
 agora iremos renderizar movimento no método render, função if right após chaves g.drawImage(rightPlayer[0]...) else if g.drawImage(leftPlayer[0]);
 execute o programa, observe apenas aparece quando movimentamos o personagem, teremos que fazer outra funcão para ele fica fixo mesmo quando não
 se usa ação do teclado, novas variáveis private int dir = 0; dir_Right = 1; dir_Left = -1;, no método render, agora na função se dir == dir_Right
 rightPlayer[]..., ele if dir == dir_Left outra sequências de imagens, no método tick é simples dir = dir_Right, dir = dir_Left em cada função 
 relacionada.
 
 
 
 

